# Security Scanning Workflow
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

name: Security Scan

on:
  schedule:
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 UTC
    - cron: '0 3 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
  code-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        pip install -r requirements.txt

    - name: Run Bandit (Python security linter)
      run: |
        bandit -r app/ -f json -o bandit-results.json
        bandit -r app/ -f txt
      continue-on-error: true

    - name: Run Safety (dependency vulnerability scanner)
      run: |
        safety check --json --output safety-results.json
        safety check
      continue-on-error: true

    - name: Run Semgrep (static analysis)
      run: |
        semgrep --config=auto app/ --json --output=semgrep-results.json
        semgrep --config=auto app/
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
          semgrep-results.json

  # GitHub CodeQL –∞–Ω–∞–ª–∏–∑
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        config-file: ./.github/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog (secret scanner)
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks (secret scanner)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
  docker-security:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: sentiment-service:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: sentiment-service:security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk Container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: sentiment-service:security-scan
        args: --severity-threshold=high
      continue-on-error: true

    - name: Run Anchore Grype scan
      uses: anchore/scan-action@v3
      with:
        image: sentiment-service:security-scan
        fail-build: false
        severity-cutoff: high

  # –ê–Ω–∞–ª–∏–∑ –ª–∏—Ü–µ–Ω–∑–∏–π
  license-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install pip-licenses
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        pip-licenses --fail-on="GPL v3"

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: |
          licenses.json
          licenses.md

  # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security-report:
    needs: [code-security, codeql-analysis, secret-scan, docker-security, license-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download scan results
      uses: actions/download-artifact@v3
      with:
        name: security-scan-results
      continue-on-error: true

    - name: Generate security report
      run: |
        cat << 'EOF' > security-report.md
        # üîí Security Scan Report
        
        **Scan Date**: $(date -u)
        **Repository**: ${{ github.repository }}
        **Branch**: ${{ github.ref_name }}
        **Commit**: ${{ github.sha }}
        
        ## Scan Results
        
        | Tool | Status |
        |------|--------|
        | Bandit | ${{ needs.code-security.result }} |
        | Safety | ${{ needs.code-security.result }} |
        | Semgrep | ${{ needs.code-security.result }} |
        | CodeQL | ${{ needs.codeql-analysis.result }} |
        | Secret Scan | ${{ needs.secret-scan.result }} |
        | Docker Security | ${{ needs.docker-security.result }} |
        | License Scan | ${{ needs.license-scan.result }} |
        
        ## Recommendations
        
        - Review all high and critical severity findings
        - Update dependencies with known vulnerabilities
        - Ensure no secrets are committed to repository
        - Verify all licenses are approved for use
        
        ## Next Steps
        
        1. Address critical and high severity issues
        2. Update security documentation
        3. Schedule regular security reviews
        
        EOF
        
        echo "Security report generated"

    - name: Create security issue (if failures)
      if: contains(needs.*.result, 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Security Scan Alert - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Security Scan Results
          
          One or more security scans have detected issues that require attention.
          
          **Failed Scans:**
          - Code Security: ${{ needs.code-security.result }}
          - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
          - Secret Scan: ${{ needs.secret-scan.result }}
          - Docker Security: ${{ needs.docker-security.result }}
          - License Scan: ${{ needs.license-scan.result }}
          
          **Action Required:**
          1. Review the scan results in the workflow run
          2. Address high and critical severity findings
          3. Update this issue with remediation steps
          
          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'high-priority', 'needs-review']
          });

    - name: Notify security team
      if: contains(needs.*.result, 'failure')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          üö® **Security Alert**
          
          Security scans have detected issues in ${{ github.repository }}
          
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          @security-team please review immediately.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
