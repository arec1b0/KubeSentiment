# Pull Request Workflow
# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –¥–ª—è PR –±–µ–∑ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

name: Pull Request Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

# –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—É—Å–∫–∏ –¥–ª—è —Ç–æ–≥–æ –∂–µ PR
concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  quick-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 isort mypy bandit safety

    - name: Security check with bandit
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Safety check for vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Code quality checks
      run: |
        echo "=== Code Formatting Check ==="
        black --check --diff app/ tests/ || echo "‚ùå Formatting issues found"
        
        echo "=== Import Sorting Check ==="
        isort --check-only --diff app/ tests/ || echo "‚ùå Import sorting issues found"
        
        echo "=== Linting Check ==="
        flake8 app/ tests/ --statistics || echo "‚ùå Linting issues found"
        
        echo "=== Type Checking ==="
        mypy app/ --ignore-missing-imports || echo "‚ùå Type checking issues found"

    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=term-missing --cov-fail-under=80
      env:
        MLOPS_DEBUG: true

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîç Code Quality Report\n\n';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
          const testResult = '${{ job.status }}' === 'success' ? '‚úÖ Passed' : '‚ùå Failed';
          comment += `**Tests**: ${testResult}\n`;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
          comment += '\n### üìä Test Coverage\n';
          comment += 'Coverage report will be available in the action logs.\n';
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
          if ('${{ job.status }}' !== 'success') {
            comment += '\n### üí° Next Steps\n';
            comment += '- Check the failed jobs above\n';
            comment += '- Run `black app/ tests/` to fix formatting\n';
            comment += '- Run `isort app/ tests/` to fix imports\n';
            comment += '- Run `pytest tests/` locally to verify tests pass\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–±–æ—Ä–∫–∏ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  docker-build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test only)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: sentiment-service:pr-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-container sentiment-service:pr-test
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        docker stop test-container

  # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö
  k8s-manifest-check:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'k8s/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin

    - name: Validate Kubernetes manifests
      run: |
        for file in k8s/*.yaml; do
          echo "Validating $file"
          kubeval "$file"
        done

    - name: Check for resource limits
      run: |
        echo "Checking for resource limits in deployments..."
        if ! grep -q "resources:" k8s/deployment.yaml; then
          echo "‚ùå Warning: No resource limits found in deployment.yaml"
          exit 1
        fi
        echo "‚úÖ Resource limits found"
