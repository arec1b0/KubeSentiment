# Complete CI/CD Pipeline for MLOps Sentiment Analysis Service
# Автоматизирует весь процесс от git push до развертывания в Kubernetes

name: CI/CD Pipeline

# Триггеры для различных событий
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Ручной запуск

# Переменные окружения
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Тестирование и качество кода
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 isort mypy

    - name: Code formatting check (Black)
      run: black --check app/ tests/

    - name: Import sorting check (isort)
      run: isort --check-only app/ tests/

    - name: Linting (flake8)
      run: flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Type checking (mypy)
      run: mypy app/ --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        MLOPS_DEBUG: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Сборка и публикация Docker образа
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Job 3: Сканирование безопасности
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Развертывание в Development
  deploy-dev:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for development
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update Kubernetes manifests
      run: |
        sed -i "s|sentiment-service:latest|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/deployment.yaml

    - name: Deploy to Development
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl rollout status deployment/sentiment-service -n mlops-sentiment --timeout=300s

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n mlops-sentiment
        kubectl get services -n mlops-sentiment

  # Job 5: Развертывание в Staging
  deploy-staging:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update Kubernetes manifests
      run: |
        sed -i "s|sentiment-service:latest|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/deployment.yaml

    - name: Deploy to Staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl rollout status deployment/sentiment-service -n mlops-sentiment --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Получаем URL сервиса
        SERVICE_URL=$(kubectl get ingress sentiment-ingress -n mlops-sentiment -o jsonpath='{.spec.rules[0].host}')
        # Запускаем smoke tests
        python test_service.py --url "https://$SERVICE_URL"

  # Job 6: Развертывание в Production
  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update Kubernetes manifests for production
      run: |
        # Используем тег релиза для production
        TAG=${GITHUB_REF#refs/tags/}
        sed -i "s|sentiment-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}|g" k8s/deployment.yaml
        # Увеличиваем количество реплик для production
        sed -i 's|replicas: 2|replicas: 3|g' k8s/deployment.yaml

    - name: Deploy to Production with Blue-Green strategy
      run: |
        export KUBECONFIG=kubeconfig
        
        # Создаем новую версию деплоймента
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Ждем успешного развертывания
        kubectl rollout status deployment/sentiment-service -n mlops-sentiment --timeout=600s
        
        # Проверяем здоровье сервиса
        kubectl get pods -n mlops-sentiment
        
    - name: Post-deployment verification
      run: |
        export KUBECONFIG=kubeconfig
        # Запускаем полные тесты в production
        python test_service.py --url "https://sentiment-api.yourdomain.com" --full-test

  # Job 7: Уведомления
  notify:
    needs: [deploy-dev, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#mlops-deployments'
        text: '✅ Deployment successful! Environment: ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#mlops-deployments'
        text: '❌ Deployment failed! Check GitHub Actions for details.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}