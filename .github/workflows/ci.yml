name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.9"

jobs:
  # Test and lint code
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort flake8 mypy

      - name: Code quality checks
        run: |
          black --check app/ tests/
          isort --check-only app/ tests/
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
          mypy app/ --ignore-missing-imports

      - name: Run tests
        run: pytest tests/ -v --cov=app --cov-report=xml
        env:
          MLOPS_DEBUG: true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Build and push Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      image: ${{ steps.meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scan
  security:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Deploy to environments
  deploy:
    needs: [build, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event_name != 'pull_request'
    strategy:
      matrix:
        environment: [development, staging, production]
        include:
          - environment: development
            branch: develop
            namespace: mlops-sentiment-dev
            replicas: 1
          - environment: staging
            branch: main
            namespace: mlops-sentiment-staging
            replicas: 2
          - environment: production
            branch: main
            namespace: mlops-sentiment
            replicas: 3
            requires_tag: true
    environment: ${{ matrix.environment }}

    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Setup kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy with Helm
        run: |
          export KUBECONFIG=kubeconfig

          # Determine if we should deploy based on branch/tag
          if [[ "${{ matrix.environment }}" == "production" && ! "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "Skipping production deployment - requires tag"
            exit 0
          fi

          if [[ "${{ matrix.environment }}" != "production" && "${{ github.ref }}" != "refs/heads/${{ matrix.branch }}" ]]; then
            echo "Skipping ${{ matrix.environment }} deployment - wrong branch"
            exit 0
          fi

          # Deploy using Helm
          helm upgrade --install mlops-sentiment ./helm/mlops-sentiment \
            --namespace ${{ matrix.namespace }} \
            --create-namespace \
            --set image.tag=${{ needs.build.outputs.image }} \
            --set replicaCount=${{ matrix.replicas }} \
            --values ./helm/mlops-sentiment/values-${{ matrix.environment }}.yaml \
            --wait --timeout=10m

      - name: Run health checks
        run: |
          export KUBECONFIG=kubeconfig
          sleep 10

          # Get service URL
          if kubectl get ingress -n ${{ matrix.namespace }} mlops-sentiment &>/dev/null; then
            SERVICE_URL=$(kubectl get ingress mlops-sentiment -n ${{ matrix.namespace }} -o jsonpath='{.spec.rules[0].host}')
            curl -f http://$SERVICE_URL/health || exit 1
          fi
