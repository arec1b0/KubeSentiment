# Multi-Environment Deployment Workflow
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

name: Deploy to Environments

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (dev, staging, prod)'
      image_tag:
        required: true
        type: string
        description: 'Docker image tag to deploy'
      replicas:
        required: false
        type: number
        default: 2
        description: 'Number of replicas'
    secrets:
      KUBE_CONFIG:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
        - dev
        - staging
        - prod
      image_tag:
        description: 'Docker image tag'
        required: true
        type: string
      replicas:
        description: 'Number of replicas'
        required: false
        type: number
        default: 2

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl cluster-info

    - name: Prepare environment-specific configurations
      run: |
        ENV="${{ inputs.environment }}"
        REPLICAS="${{ inputs.replicas }}"
        IMAGE_TAG="${{ inputs.image_tag }}"
        
        echo "Preparing deployment for environment: $ENV"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        cp -r k8s/ k8s-$ENV/
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑
        sed -i "s|sentiment-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" k8s-$ENV/deployment.yaml
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º
        case $ENV in
          "dev")
            # Development: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            sed -i "s|replicas: 2|replicas: 1|g" k8s-$ENV/deployment.yaml
            sed -i "s|cpu: \"500m\"|cpu: \"250m\"|g" k8s-$ENV/deployment.yaml
            sed -i "s|memory: \"1Gi\"|memory: \"512Mi\"|g" k8s-$ENV/deployment.yaml
            sed -i "s|cpu: \"1000m\"|cpu: \"500m\"|g" k8s-$ENV/deployment.yaml
            sed -i "s|memory: \"2Gi\"|memory: \"1Gi\"|g" k8s-$ENV/deployment.yaml
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –∫ namespace
            sed -i "s|namespace: mlops-sentiment|namespace: mlops-sentiment-dev|g" k8s-$ENV/*.yaml
            ;;
          "staging")
            # Staging: —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
            sed -i "s|replicas: 2|replicas: 2|g" k8s-$ENV/deployment.yaml
            sed -i "s|namespace: mlops-sentiment|namespace: mlops-sentiment-staging|g" k8s-$ENV/*.yaml
            ;;
          "prod")
            # Production: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            sed -i "s|replicas: 2|replicas: ${REPLICAS}|g" k8s-$ENV/deployment.yaml
            sed -i "s|cpu: \"500m\"|cpu: \"1000m\"|g" k8s-$ENV/deployment.yaml
            sed -i "s|memory: \"1Gi\"|memory: \"2Gi\"|g" k8s-$ENV/deployment.yaml
            sed -i "s|cpu: \"1000m\"|cpu: \"2000m\"|g" k8s-$ENV/deployment.yaml
            sed -i "s|memory: \"2Gi\"|memory: \"4Gi\"|g" k8s-$ENV/deployment.yaml
            # Production –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π namespace
            ;;
        esac
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        echo "=== Final Deployment Configuration ==="
        cat k8s-$ENV/deployment.yaml

    - name: Deploy to ${{ inputs.environment }}
      run: |
        export KUBECONFIG=kubeconfig
        ENV="${{ inputs.environment }}"
        
        echo "üöÄ Starting deployment to $ENV environment..."
        
        # –°–æ–∑–¥–∞–µ–º namespace –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        kubectl apply -f k8s-$ENV/namespace.yaml
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        kubectl apply -f k8s-$ENV/configmap.yaml
        kubectl apply -f k8s-$ENV/deployment.yaml
        kubectl apply -f k8s-$ENV/service.yaml
        kubectl apply -f k8s-$ENV/hpa.yaml
        
        # Ingress —Ç–æ–ª—å–∫–æ –¥–ª—è staging –∏ prod
        if [[ "$ENV" != "dev" ]]; then
          kubectl apply -f k8s-$ENV/ingress.yaml
        fi
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        NAMESPACE="mlops-sentiment"
        if [[ "$ENV" != "prod" ]]; then
          NAMESPACE="mlops-sentiment-$ENV"
        fi
        
        echo "‚è≥ Waiting for deployment to complete in namespace: $NAMESPACE"
        kubectl rollout status deployment/sentiment-service -n $NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        ENV="${{ inputs.environment }}"
        
        NAMESPACE="mlops-sentiment"
        if [[ "$ENV" != "prod" ]]; then
          NAMESPACE="mlops-sentiment-$ENV"
        fi
        
        echo "üìä Deployment verification for $ENV:"
        kubectl get pods -n $NAMESPACE -o wide
        kubectl get services -n $NAMESPACE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HPA
        kubectl get hpa -n $NAMESPACE
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=sentiment-service -o jsonpath='{.items[0].metadata.name}')
        echo "üìã Recent logs from $POD_NAME:"
        kubectl logs $POD_NAME -n $NAMESPACE --tail=20

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        ENV="${{ inputs.environment }}"
        
        NAMESPACE="mlops-sentiment"
        if [[ "$ENV" != "prod" ]]; then
          NAMESPACE="mlops-sentiment-$ENV"
        fi
        
        echo "üß™ Running health checks..."
        
        # Port forward –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        kubectl port-forward -n $NAMESPACE service/sentiment-service 8080:8000 &
        PF_PID=$!
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É port-forward
        sleep 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoints
        curl -f http://localhost:8080/health || (kill $PF_PID && exit 1)
        curl -f http://localhost:8080/metrics || (kill $PF_PID && exit 1)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        curl -X POST http://localhost:8080/predict \
          -H "Content-Type: application/json" \
          -d '{"text": "This is a test message for '"$ENV"' environment"}' \
          -f || (kill $PF_PID && exit 1)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º port-forward
        kill $PF_PID
        
        echo "‚úÖ All health checks passed for $ENV environment!"

    - name: Cleanup temporary files
      if: always()
      run: |
        rm -rf k8s-${{ inputs.environment }}/
        rm -f kubeconfig

    - name: Notify deployment result
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          üöÄ Deployment to **${{ inputs.environment }}** environment
          **Status**: ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
          **Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}`
          **Replicas**: ${{ inputs.replicas }}
          **Commit**: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è production
  production-validation:
    needs: deploy
    runs-on: ubuntu-latest
    if: inputs.environment == 'prod'
    
    steps:
    - name: Extended production validation
      run: |
        echo "üîç Running extended production validation..."
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # - –í–∞–ª–∏–¥–∞—Ü–∏—è SLA
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        # - Smoke tests –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        
        echo "‚úÖ Extended validation completed"

    - name: Update monitoring dashboards
      run: |
        echo "üìä Updating monitoring dashboards for production deployment..."
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana
        # –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        echo "‚úÖ Monitoring dashboards updated"
