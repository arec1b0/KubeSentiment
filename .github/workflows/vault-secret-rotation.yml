name: Vault Secret Rotation

on:
    schedule:
        # Run every Sunday at midnight UTC
        - cron: "0 0 * * 0"
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to rotate secrets"
                required: true
                type: choice
                options:
                    - dev
                    - staging
                    - prod
            secret_name:
                description: "Secret to rotate (leave empty for all)"
                required: false
                type: string
            dry_run:
                description: "Dry run mode"
                required: false
                type: boolean
                default: false

env:
    PYTHON_VERSION: "3.11"

jobs:
    rotate-secrets:
        runs-on: ubuntu-latest
        permissions:
            id-token: write # Required for OIDC
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  pip install hvac kubernetes

            - name: Import secrets from Vault
              uses: hashicorp/vault-action@v2
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: jwt
                  role: github-actions-rotation
                  secrets: |
                      mlops-sentiment/data/admin vault_token | VAULT_TOKEN

            - name: Determine rotation target
              id: rotation-config
              run: |
                  if [ "${{ github.event_name }}" == "schedule" ]; then
                    echo "environment=prod" >> $GITHUB_OUTPUT
                    echo "secrets=api_key,database_password" >> $GITHUB_OUTPUT
                  else
                    echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
                    if [ -n "${{ inputs.secret_name }}" ]; then
                      echo "secrets=${{ inputs.secret_name }}" >> $GITHUB_OUTPUT
                    else
                      echo "secrets=api_key,database_password" >> $GITHUB_OUTPUT
                    fi
                  fi

            - name: Rotate secrets
              env:
                  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
                  VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
                  ENVIRONMENT: ${{ steps.rotation-config.outputs.environment }}
              run: |
                  IFS=',' read -ra SECRETS <<< "${{ steps.rotation-config.outputs.secrets }}"

                  for secret in "${SECRETS[@]}"; do
                    echo "Rotating secret: $secret in $ENVIRONMENT"

                    DRY_RUN_FLAG=""
                    if [ "${{ inputs.dry_run }}" == "true" ]; then
                      DRY_RUN_FLAG="--dry-run"
                    fi

                    python scripts/rotate-secrets.py \
                      --vault-addr "$VAULT_ADDR" \
                      --vault-token "$VAULT_TOKEN" \
                      --environment "$ENVIRONMENT" \
                      --secret "$secret" \
                      --k8s-namespace "mlops-$ENVIRONMENT" \
                      --k8s-deployment "mlops-sentiment" \
                      $DRY_RUN_FLAG

                    if [ $? -ne 0 ]; then
                      echo "::error::Failed to rotate secret: $secret"
                      exit 1
                    fi
                  done

            - name: Wait for rollout completion
              if: ${{ !inputs.dry_run }}
              run: |
                  kubectl --namespace mlops-${{ steps.rotation-config.outputs.environment }} \
                    rollout status deployment/mlops-sentiment \
                    --timeout=10m

            - name: Verify application health
              if: ${{ !inputs.dry_run }}
              run: |
                  NAMESPACE="mlops-${{ steps.rotation-config.outputs.environment }}"
                  SERVICE_URL=$(kubectl get svc mlops-sentiment -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

                  if [ -z "$SERVICE_URL" ]; then
                    SERVICE_URL=$(kubectl get svc mlops-sentiment -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                  fi

                  if [ -n "$SERVICE_URL" ]; then
                    curl -f "http://$SERVICE_URL:8000/health" || {
                      echo "::error::Health check failed after rotation"
                      exit 1
                    }
                  else
                    echo "::warning::Could not determine service URL for health check"
                  fi

            - name: Notify on success
              if: success() && !inputs.dry_run
              uses: 8398a7/action-slack@v3
              with:
                  status: ${{ job.status }}
                  text: |
                      ✅ Secret rotation completed successfully
                      Environment: ${{ steps.rotation-config.outputs.environment }}
                      Secrets: ${{ steps.rotation-config.outputs.secrets }}
                  webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

            - name: Notify on failure
              if: failure()
              uses: 8398a7/action-slack@v3
              with:
                  status: ${{ job.status }}
                  text: |
                      ❌ Secret rotation failed
                      Environment: ${{ steps.rotation-config.outputs.environment }}
                      Secrets: ${{ steps.rotation-config.outputs.secrets }}
                      Please check the workflow logs and consider manual intervention.
                  webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

            - name: Create rotation audit log
              if: always() && !inputs.dry_run
              run: |
                  cat << EOF > rotation-audit-$(date +%Y%m%d-%H%M%S).json
                  {
                    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                    "environment": "${{ steps.rotation-config.outputs.environment }}",
                    "secrets": "${{ steps.rotation-config.outputs.secrets }}",
                    "status": "${{ job.status }}",
                    "triggered_by": "${{ github.actor }}",
                    "run_id": "${{ github.run_id }}"
                  }
                  EOF

            - name: Upload audit log
              if: always() && !inputs.dry_run
              uses: actions/upload-artifact@v3
              with:
                  name: rotation-audit-logs
                  path: rotation-audit-*.json
                  retention-days: 90
