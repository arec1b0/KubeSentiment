input {
  # TCP input for structured JSON logs
  tcp {
    port => 5000
    codec => json
    type => "mlops-logs"
  }

  # UDP input for structured JSON logs
  udp {
    port => 5000
    codec => json
    type => "mlops-logs"
  }

  # Beats input for Filebeat
  beats {
    port => 5044
    type => "mlops-logs"
  }
}

filter {
  # Parse JSON logs
  if [type] == "mlops-logs" {
    json {
      source => "message"
      target => "parsed"
    }

    # Extract common fields
    mutate {
      add_field => {
        "service" => "%{[parsed][service]}"
        "version" => "%{[parsed][version]}"
        "environment" => "%{[parsed][environment]}"
        "level" => "%{[parsed][level]}"
        "correlation_id" => "%{[parsed][correlation_id]}"
        "trace_id" => "%{[parsed][trace_id]}"
      }
      remove_field => ["parsed"]
    }

    # Parse timestamp
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }

    # Geoip enrichment for IP addresses
    if [source_ip] {
      geoip {
        source => "source_ip"
        target => "geoip"
      }
    }

    # Add tags based on log level
    if [level] == "ERROR" or [level] == "CRITICAL" {
      mutate {
        add_tag => ["error"]
      }
    }

    if [level] == "WARNING" {
      mutate {
        add_tag => ["warning"]
      }
    }

    # Tag security events
    if [security_alert] == true {
      mutate {
        add_tag => ["security"]
      }
    }

    # Tag ML operations
    if [operation_type] == "model" {
      mutate {
        add_tag => ["ml-operation"]
      }
    }

    # Parse HTTP request logs
    if [request_type] == "api" {
      mutate {
        add_field => {
          "http_method" => "%{[http_method]}"
          "http_path" => "%{[http_path]}"
          "http_status" => "%{[http_status]}"
          "duration_ms" => "%{[duration_ms]}"
        }
        add_tag => ["http-request"]
      }
    }

    # Calculate metrics for aggregation
    if [duration_ms] {
      ruby {
        code => "event.set('duration_seconds', event.get('duration_ms').to_f / 1000.0)"
      }
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "mlops-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"
    manage_template => true
    template_name => "mlops-logs"
    template_overwrite => true
  }

  # Output to stdout for debugging (comment out in production)
  stdout {
    codec => rubydebug
  }
}

