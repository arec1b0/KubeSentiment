#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    local deps=("gh" "kubectl" "docker" "curl" "jq")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing[*]}"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"
        for dep in "${missing[@]}"; do
            case $dep in
                "gh")
                    echo "  - GitHub CLI: https://cli.github.com/"
                    ;;
                "kubectl")
                    echo "  - kubectl: https://kubernetes.io/docs/tasks/tools/"
                    ;;
                "docker")
                    echo "  - Docker: https://docs.docker.com/get-docker/"
                    ;;
                "curl")
                    echo "  - curl: –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    ;;
                "jq")
                    echo "  - jq: https://stedolan.github.io/jq/"
                    ;;
            esac
        done
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ GitHub
check_github_auth() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ GitHub..."
    
    if ! gh auth status &> /dev/null; then
        log_warning "GitHub CLI –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        log_info "–ó–∞–ø—É—Å–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
        gh auth login
    fi
    
    log_success "GitHub –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è OK"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Environments
setup_environments() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Environments..."
    
    local environments=("development" "staging" "production")
    
    for env in "${environments[@]}"; do
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $env"
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        gh api repos/:owner/:repo/environments/$env \
            --method PUT \
            --field wait_timer=0 \
            --silent 2>/dev/null || true
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º protection rules –¥–ª—è production
        if [ "$env" = "production" ]; then
            log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ protection rules –¥–ª—è production..."
            gh api repos/:owner/:repo/environments/production \
                --method PUT \
                --field wait_timer=600 \
                --field prevent_self_review=true \
                --field reviewers='[{"type":"Team","id":null}]' \
                --silent 2>/dev/null || true
        fi
    done
    
    log_success "GitHub Environments –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
setup_secrets() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤..."
    
    # Kubernetes configurations
    setup_kubernetes_secrets
    
    # Slack webhook
    setup_slack_webhook
    
    # Container signing
    setup_cosign_keys
    
    log_success "–°–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kubernetes —Å–µ–∫—Ä–µ—Ç–æ–≤
setup_kubernetes_secrets() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kubernetes —Å–µ–∫—Ä–µ—Ç–æ–≤..."
    
    local kube_configs=("dev" "staging" "prod")
    
    for env in "${kube_configs[@]}"; do
        local config_file="$HOME/.kube/config-$env"
        local secret_name="KUBE_CONFIG_${env^^}"
        
        if [ -f "$config_file" ]; then
            log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ $secret_name..."
            base64 -w 0 "$config_file" | gh secret set "$secret_name"
            log_success "$secret_name –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            log_warning "–§–∞–π–ª $config_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º $secret_name"
            log_info "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª kubeconfig –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è $env –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤—Ä—É—á–Ω—É—é"
        fi
    done
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slack webhook
setup_slack_webhook() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slack webhook..."
    
    read -p "–í–≤–µ–¥–∏—Ç–µ Slack Webhook URL (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " slack_url
    
    if [ -n "$slack_url" ]; then
        echo "$slack_url" | gh secret set SLACK_WEBHOOK_URL
        log_success "Slack webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        log_warning "Slack webhook –ø—Ä–æ–ø—É—â–µ–Ω"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
setup_cosign_keys() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π cosign –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if command -v cosign &> /dev/null; then
        read -p "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ cosign? (y/n): " generate_keys
        
        if [ "$generate_keys" = "y" ] || [ "$generate_keys" = "Y" ]; then
            log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π cosign..."
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            local temp_dir=$(mktemp -d)
            cd "$temp_dir"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
            cosign generate-key-pair
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
            gh secret set COSIGN_PRIVATE_KEY < cosign.key
            
            read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª—é—á–∞ cosign: " cosign_password
            echo
            echo "$cosign_password" | gh secret set COSIGN_PASSWORD
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cd - > /dev/null
            rm -rf "$temp_dir"
            
            log_success "–ö–ª—é—á–∏ cosign –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        else
            log_warning "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π cosign –ø—Ä–æ–ø—É—â–µ–Ω–∞"
        fi
    else
        log_warning "cosign –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–ª—é—á–µ–π"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ cosign: https://docs.sigstore.dev/cosign/installation/"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup_variables() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # Jira integration (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    read -p "–í–≤–µ–¥–∏—Ç–µ Jira Base URL (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " jira_url
    if [ -n "$jira_url" ]; then
        gh variable set JIRA_BASE_URL --body "$jira_url"
        
        read -p "–í–≤–µ–¥–∏—Ç–µ Jira Project Key: " jira_key
        if [ -n "$jira_key" ]; then
            gh variable set JIRA_PROJECT_KEY --body "$jira_key"
        fi
        
        read -p "–í–≤–µ–¥–∏—Ç–µ Jira User Email: " jira_email
        if [ -n "$jira_email" ]; then
            gh variable set JIRA_USER_EMAIL --body "$jira_email"
        fi
        
        read -s -p "–í–≤–µ–¥–∏—Ç–µ Jira API Token: " jira_token
        echo
        if [ -n "$jira_token" ]; then
            echo "$jira_token" | gh secret set JIRA_API_TOKEN
        fi
        
        log_success "Jira –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    fi
    
    log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
test_setup() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–≤
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤..."
    gh secret list
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    gh variable list
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º environments
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ environments..."
    gh api repos/:owner/:repo/environments --jq '.[].name'
    
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ workflow run
trigger_test_workflow() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ workflow..."
    
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π CI/CD workflow? (y/n): " run_test
    
    if [ "$run_test" = "y" ] || [ "$run_test" = "Y" ]; then
        gh workflow run ci.yml
        log_success "–¢–µ—Å—Ç–æ–≤—ã–π workflow –∑–∞–ø—É—â–µ–Ω"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ GitHub Actions"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
generate_docs() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    
    cat > CICD_SETUP.md << 'EOF'
# CI/CD Setup Complete

## üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–í–∞—à CI/CD –ø–∞–π–ø–ª–∞–π–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í–æ—Ç —á—Ç–æ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:

### GitHub Environments
- ‚úÖ Development
- ‚úÖ Staging  
- ‚úÖ Production

### Workflows
- ‚úÖ CI/CD Pipeline (`ci.yml`)
- ‚úÖ Pull Request Check (`pr.yml`)
- ‚úÖ Release Management (`release.yml`)
- ‚úÖ Environment Deployment (`deploy-environments.yml`)
- ‚úÖ Security Scanning (`security-scan.yml`)
- ‚úÖ Cleanup (`cleanup.yml`)

### –°–µ–∫—Ä–µ—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ GitHub Settings:
- Repository secrets
- Environment secrets
- Repository variables

## üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

### –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
1. –°–æ–∑–¥–∞–π—Ç–µ feature branch
2. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
3. –°–æ–∑–¥–∞–π—Ç–µ Pull Request ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∏
4. –ü–æ—Å–ª–µ merge –≤ `develop` ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –≤ development

### –î–ª—è staging
1. Merge –≤ `main` ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –≤ staging
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ
3. –ü—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–π—Ç–µ release tag

### –î–ª—è production
1. –°–æ–∑–¥–∞–π—Ç–µ git tag: `git tag v1.0.0 && git push origin v1.0.0`
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è production deployment
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

- GitHub Actions –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤
- Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
- Security scans –≤ GitHub Security tab

## üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è ingress
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Prometheus/Grafana)
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

## üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

- [GitHub Actions Documentation](https://docs.github.com/en/actions)
- [Kubernetes Documentation](https://kubernetes.io/docs/)
- [Docker Best Practices](https://docs.docker.com/develop/dev-best-practices/)

EOF

    log_success "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: CICD_SETUP.md"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è MLOps –ø—Ä–æ–µ–∫—Ç–∞"
    echo "=============================================="
    echo
    
    check_dependencies
    check_github_auth
    setup_environments
    setup_secrets
    setup_variables
    test_setup
    generate_docs
    trigger_test_workflow
    
    echo
    log_success "üéâ CI/CD –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
    echo
    log_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ GitHub Settings"
    echo "2. –û–±–Ω–æ–≤–∏—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è ingress"
    echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–≤—ã–π deployment"
    echo
    log_info "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ CICD_SETUP.md"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --check        –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        echo "  --secrets      –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã"
        echo "  --test         –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
        exit 0
        ;;
    --check)
        check_dependencies
        check_github_auth
        exit 0
        ;;
    --secrets)
        check_dependencies
        check_github_auth
        setup_secrets
        exit 0
        ;;
    --test)
        test_setup
        exit 0
        ;;
    *)
        main
        ;;
esac
