#!/bin/bash

# MLOps Monitoring Setup Script
# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω—É–ª—è

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
MONITORING_NAMESPACE="monitoring"
APP_NAMESPACE="mlops-sentiment"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Banner
show_banner() {
    echo -e "${PURPLE}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ MLOps Sentiment Analysis - Monitoring Setup üìä        ‚ïë
‚ïë                                                              ‚ïë
‚ïë    –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:                     ‚ïë
‚ïë    ‚Ä¢ Prometheus + Alertmanager                               ‚ïë
‚ïë    ‚Ä¢ Grafana —Å –¥–∞—à–±–æ—Ä–¥–∞–º–∏                                    ‚ïë
‚ïë    ‚Ä¢ NetworkPolicy –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏                         ‚ïë
‚ïë    ‚Ä¢ Helm —É–ø–∞–∫–æ–≤–∫–∞                                           ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    local missing_tools=()
    
    # Check kubectl
    if ! command -v kubectl &> /dev/null; then
        missing_tools+=("kubectl")
    fi
    
    # Check helm
    if ! command -v helm &> /dev/null; then
        missing_tools+=("helm")
    fi
    
    # Check yq (for YAML processing)
    if ! command -v yq &> /dev/null; then
        log_warning "yq –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing_tools[*]}"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:"
        echo "  kubectl: https://kubernetes.io/docs/tasks/tools/"
        echo "  helm: https://helm.sh/docs/intro/install/"
        exit 1
    fi
    
    # Check cluster connection
    if ! kubectl cluster-info &> /dev/null; then
        log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes"
        log_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        exit 1
    fi
    
    log_success "–í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# Setup namespaces
setup_namespaces() {
    log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω..."
    
    # Create monitoring namespace
    if ! kubectl get namespace $MONITORING_NAMESPACE &> /dev/null; then
        kubectl create namespace $MONITORING_NAMESPACE
        kubectl label namespace $MONITORING_NAMESPACE name=$MONITORING_NAMESPACE
        log_success "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω: $MONITORING_NAMESPACE"
    else
        log_info "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω $MONITORING_NAMESPACE —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # Create app namespace
    if ! kubectl get namespace $APP_NAMESPACE &> /dev/null; then
        kubectl create namespace $APP_NAMESPACE
        kubectl label namespace $APP_NAMESPACE name=$APP_NAMESPACE
        log_success "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω: $APP_NAMESPACE"
    else
        log_info "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω $APP_NAMESPACE —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# Add Helm repositories
setup_helm_repos() {
    log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Helm —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤..."
    
    # Add Prometheus community repo
    if ! helm repo list | grep -q prometheus-community; then
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        log_success "–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π prometheus-community"
    fi
    
    # Add Grafana repo
    if ! helm repo list | grep -q grafana; then
        helm repo add grafana https://grafana.github.io/helm-charts
        log_success "–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π grafana"
    fi
    
    # Update repos
    helm repo update
    log_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
}

# Install Prometheus Operator
install_prometheus_operator() {
    log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Prometheus Operator..."
    
    if helm list -n $MONITORING_NAMESPACE | grep -q prometheus-operator; then
        log_info "Prometheus Operator —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Prometheus Operator (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
    
    helm install prometheus-operator prometheus-community/kube-prometheus-stack \
        --namespace $MONITORING_NAMESPACE \
        --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
        --set prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false \
        --set prometheus.prometheusSpec.retention=30d \
        --set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage=50Gi \
        --set grafana.adminPassword=admin123 \
        --set grafana.persistence.enabled=true \
        --set grafana.persistence.size=10Gi \
        --set alertmanager.alertmanagerSpec.storage.volumeClaimTemplate.spec.resources.requests.storage=5Gi \
        --wait \
        --timeout=15m
    
    log_success "Prometheus Operator —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# Apply monitoring configurations
apply_monitoring_configs() {
    log_step "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # Apply Grafana datasources
    if [[ -f "$PROJECT_ROOT/monitoring/grafana-datasources.yaml" ]]; then
        kubectl apply -f "$PROJECT_ROOT/monitoring/grafana-datasources.yaml"
        log_success "–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö Grafana"
    fi
    
    # Apply Alertmanager config
    if [[ -f "$PROJECT_ROOT/monitoring/alertmanager-config.yaml" ]]; then
        kubectl apply -f "$PROJECT_ROOT/monitoring/alertmanager-config.yaml"
        log_success "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alertmanager"
    fi
    
    # Apply extended Prometheus rules
    if [[ -f "$PROJECT_ROOT/monitoring/prometheus-rules.yaml" ]]; then
        kubectl apply -f "$PROJECT_ROOT/monitoring/prometheus-rules.yaml"
        log_success "–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ Prometheus"
    fi
}

# Deploy MLOps application
deploy_mlops_app() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ MLOps –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    local environment="${ENVIRONMENT:-dev}"
    local image_tag="${IMAGE_TAG:-latest}"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: $environment"
    log_info "–¢–µ–≥ –æ–±—Ä–∞–∑–∞: $image_tag"
    
    # Deploy with Helm
    helm upgrade --install mlops-sentiment "$PROJECT_ROOT/helm/mlops-sentiment" \
        --namespace $APP_NAMESPACE \
        --values "$PROJECT_ROOT/helm/mlops-sentiment/values-$environment.yaml" \
        --set image.tag="$image_tag" \
        --wait \
        --timeout=10m
    
    log_success "MLOps –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ"
}

# Verify deployment
verify_deployment() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # Check Prometheus Operator components
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Prometheus Operator..."
    kubectl get pods -n $MONITORING_NAMESPACE -l app.kubernetes.io/name=prometheus
    kubectl get pods -n $MONITORING_NAMESPACE -l app.kubernetes.io/name=grafana
    kubectl get pods -n $MONITORING_NAMESPACE -l app.kubernetes.io/name=alertmanager
    
    # Check MLOps application
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ MLOps –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    kubectl get pods -n $APP_NAMESPACE -l app.kubernetes.io/name=mlops-sentiment
    
    # Wait for pods to be ready
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤..."
    kubectl wait --for=condition=ready pod \
        --selector=app.kubernetes.io/name=prometheus \
        --namespace=$MONITORING_NAMESPACE \
        --timeout=300s
    
    kubectl wait --for=condition=ready pod \
        --selector=app.kubernetes.io/name=grafana \
        --namespace=$MONITORING_NAMESPACE \
        --timeout=300s
    
    kubectl wait --for=condition=ready pod \
        --selector=app.kubernetes.io/name=mlops-sentiment \
        --namespace=$APP_NAMESPACE \
        --timeout=300s
    
    log_success "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
}

# Test monitoring stack
test_monitoring() {
    log_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # Test metrics endpoint
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫..."
    kubectl port-forward -n $APP_NAMESPACE svc/mlops-sentiment 8080:80 &
    PF_PID=$!
    
    sleep 10
    
    if curl -f http://localhost:8080/metrics &> /dev/null; then
        log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–≠–Ω–¥–ø–æ–∏–Ω—Ç –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    kill $PF_PID &> /dev/null || true
    
    # Check ServiceMonitor
    if kubectl get servicemonitor -n $APP_NAMESPACE mlops-sentiment &> /dev/null; then
        log_success "ServiceMonitor —Å–æ–∑–¥–∞–Ω"
    else
        log_warning "ServiceMonitor –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # Check PrometheusRule
    if kubectl get prometheusrule -n $APP_NAMESPACE mlops-sentiment-alerts &> /dev/null; then
        log_success "PrometheusRule —Å–æ–∑–¥–∞–Ω"
    else
        log_warning "PrometheusRule –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# Show access information
show_access_info() {
    log_step "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ..."
    
    echo ""
    echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞!${NC}"
    echo ""
    echo -e "${BLUE}üìä –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º:${NC}"
    echo ""
    
    # Grafana
    echo -e "${YELLOW}Grafana Dashboard:${NC}"
    echo "  kubectl port-forward -n $MONITORING_NAMESPACE svc/prometheus-operator-grafana 3000:80"
    echo "  URL: http://localhost:3000"
    echo "  –õ–æ–≥–∏–Ω: admin"
    echo "  –ü–∞—Ä–æ–ª—å: admin123"
    echo ""
    
    # Prometheus
    echo -e "${YELLOW}Prometheus:${NC}"
    echo "  kubectl port-forward -n $MONITORING_NAMESPACE svc/prometheus-operator-kube-p-prometheus 9090:9090"
    echo "  URL: http://localhost:9090"
    echo ""
    
    # Alertmanager
    echo -e "${YELLOW}Alertmanager:${NC}"
    echo "  kubectl port-forward -n $MONITORING_NAMESPACE svc/prometheus-operator-kube-p-alertmanager 9093:9093"
    echo "  URL: http://localhost:9093"
    echo ""
    
    # MLOps Application
    echo -e "${YELLOW}MLOps Application:${NC}"
    echo "  kubectl port-forward -n $APP_NAMESPACE svc/mlops-sentiment 8080:80"
    echo "  Health: http://localhost:8080/health"
    echo "  Metrics: http://localhost:8080/metrics"
    echo "  API Docs: http://localhost:8080/docs"
    echo ""
    
    echo -e "${BLUE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  kubectl logs -f -n $APP_NAMESPACE -l app.kubernetes.io/name=mlops-sentiment"
    echo ""
    echo "  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  kubectl scale deployment mlops-sentiment --replicas=5 -n $APP_NAMESPACE"
    echo ""
    echo "  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "  helm upgrade mlops-sentiment ./helm/mlops-sentiment -n $APP_NAMESPACE"
    echo ""
    echo "  # –£–¥–∞–ª–µ–Ω–∏–µ"
    echo "  helm uninstall mlops-sentiment -n $APP_NAMESPACE"
    echo "  helm uninstall prometheus-operator -n $MONITORING_NAMESPACE"
    echo ""
    
    echo -e "${GREEN}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${PROJECT_ROOT}/MONITORING.md${NC}"
    echo ""
}

# Cleanup function
cleanup() {
    log_step "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    # Kill any background processes
    jobs -p | xargs -r kill &> /dev/null || true
}

# Main execution
main() {
    # Set trap for cleanup
    trap cleanup EXIT
    
    show_banner
    
    check_prerequisites
    setup_namespaces
    setup_helm_repos
    install_prometheus_operator
    apply_monitoring_configs
    deploy_mlops_app
    verify_deployment
    test_monitoring
    show_access_info
    
    echo ""
    log_success "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
}

# Handle script arguments
case "${1:-setup}" in
    "setup")
        main
        ;;
    "cleanup")
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
        helm uninstall mlops-sentiment -n $APP_NAMESPACE 2>/dev/null || true
        helm uninstall prometheus-operator -n $MONITORING_NAMESPACE 2>/dev/null || true
        kubectl delete namespace $APP_NAMESPACE 2>/dev/null || true
        kubectl delete namespace $MONITORING_NAMESPACE 2>/dev/null || true
        log_success "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∞"
        ;;
    "status")
        echo "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
        echo ""
        echo "Prometheus Operator:"
        helm status prometheus-operator -n $MONITORING_NAMESPACE 2>/dev/null || echo "  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo ""
        echo "MLOps Application:"
        helm status mlops-sentiment -n $APP_NAMESPACE 2>/dev/null || echo "  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo ""
        echo "–ü–æ–¥—ã:"
        kubectl get pods -n $MONITORING_NAMESPACE 2>/dev/null || true
        kubectl get pods -n $APP_NAMESPACE 2>/dev/null || true
        ;;
    "test")
        test_monitoring
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {setup|cleanup|status|test}"
        echo ""
        echo "  setup   - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        echo "  cleanup - –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        echo "  status  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
        echo "  test    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        exit 1
        ;;
esac
