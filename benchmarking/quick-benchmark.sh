#!/bin/bash
# MLOps Sentiment Analysis - Quick Benchmark Script
# –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
INSTANCE_TYPE="cpu-small"
USERS=10
DURATION=60
ENDPOINT="http://localhost:8080/predict"
NAMESPACE="mlops-benchmark"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
üöÄ MLOps Sentiment Analysis - Quick Benchmark

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]

–û–ø—Ü–∏–∏:
  -t, --type INSTANCE_TYPE    –¢–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞ (cpu-small, cpu-medium, gpu-t4, etc.)
  -u, --users USERS          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)
  -d, --duration DURATION    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)
  -e, --endpoint ENDPOINT    URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8080/predict)
  -n, --namespace NAMESPACE  Kubernetes namespace (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: mlops-benchmark)
  -h, --help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  $0 -t cpu-medium -u 20 -d 120
  $0 --type gpu-t4 --users 50 --duration 300
  $0 -e http://my-service:8080/predict -u 100

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤:
  CPU: cpu-small, cpu-medium, cpu-large, cpu-xlarge
  GPU: gpu-t4, gpu-v100, gpu-a100
EOF
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--type)
            INSTANCE_TYPE="$2"
            shift 2
            ;;
        -u|--users)
            USERS="$2"
            shift 2
            ;;
        -d|--duration)
            DURATION="$2"
            shift 2
            ;;
        -e|--endpoint)
            ENDPOINT="$2"
            shift 2
            ;;
        -n|--namespace)
            NAMESPACE="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
RESULTS_DIR="${PROJECT_ROOT}/results"

log_info "üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"
log_info "–¢–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞: $INSTANCE_TYPE"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: $USERS"
log_info "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${DURATION}s"
log_info "–≠–Ω–¥–ø–æ–∏–Ω—Ç: $ENDPOINT"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p "$RESULTS_DIR"/{reports,cost_reports}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞..."
if curl -s --connect-timeout 5 "${ENDPOINT%/predict}/health" > /dev/null; then
    log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_warning "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
log_info "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
python3 "${SCRIPT_DIR}/resource-monitor.py" \
    --namespace "$NAMESPACE" \
    --duration $((DURATION + 30)) \
    --output "${RESULTS_DIR}/resource_metrics_${INSTANCE_TYPE}_quick.json" &
MONITOR_PID=$!

# –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
sleep 5

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
log_info "–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
python3 "${SCRIPT_DIR}/load-test.py" \
    --config "${PROJECT_ROOT}/configs/benchmark-config.yaml" \
    --instance-type "$INSTANCE_TYPE" \
    --endpoint "$ENDPOINT" \
    --users "$USERS" \
    --duration "$DURATION" \
    --output "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json" \
    --report-dir "${RESULTS_DIR}/reports"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
kill $MONITOR_PID 2>/dev/null || true
wait $MONITOR_PID 2>/dev/null || true

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
log_info "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏..."
python3 "${SCRIPT_DIR}/cost-calculator.py" \
    --config "${PROJECT_ROOT}/configs/benchmark-config.yaml" \
    --results "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json" \
    --predictions 1000 \
    --output "${RESULTS_DIR}/cost_analysis_${INSTANCE_TYPE}_quick.json" \
    --report-dir "${RESULTS_DIR}/cost_reports"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç
log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
python3 "${SCRIPT_DIR}/report-generator.py" \
    --results-dir "$RESULTS_DIR" \
    --output "${RESULTS_DIR}/quick_benchmark_report_${INSTANCE_TYPE}.html"

# –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
log_success "üéâ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"

if [ -f "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json" ]; then
    echo ""
    echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê:"
    echo "========================"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é jq
    if command -v jq &> /dev/null; then
        RPS=$(jq -r '.requests_per_second' "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json")
        AVG_LATENCY=$(jq -r '.avg_latency' "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json")
        P95_LATENCY=$(jq -r '.p95_latency' "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json")
        ERROR_RATE=$(jq -r '.error_rate' "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json")
        TOTAL_REQUESTS=$(jq -r '.total_requests' "${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json")
        
        echo "üöÄ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${RPS}"
        echo "‚ö° –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${AVG_LATENCY}ms"
        echo "üìà P95 –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${P95_LATENCY}ms"
        echo "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${ERROR_RATE}%"
        echo "üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${TOTAL_REQUESTS}"
    else
        log_warning "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ JSON —Ñ–∞–π–ª–∞—Ö"
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if [ -f "${RESULTS_DIR}/cost_analysis_${INSTANCE_TYPE}_quick.json" ] && command -v jq &> /dev/null; then
        COST_1000=$(jq -r '.analyses[0].cost_per_1000_predictions' "${RESULTS_DIR}/cost_analysis_${INSTANCE_TYPE}_quick.json" 2>/dev/null)
        if [ "$COST_1000" != "null" ] && [ "$COST_1000" != "" ]; then
            echo "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å 1000 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: \$${COST_1000}"
        fi
    fi
fi

echo ""
echo "üìÅ –§–ê–ô–õ–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:"
echo "====================="
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞: ${RESULTS_DIR}/benchmark_${INSTANCE_TYPE}_quick.json"
echo "üñ•Ô∏è  –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${RESULTS_DIR}/resource_metrics_${INSTANCE_TYPE}_quick.json"
echo "üí∞ –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: ${RESULTS_DIR}/cost_analysis_${INSTANCE_TYPE}_quick.json"
echo "üìã HTML –æ—Ç—á–µ—Ç: ${RESULTS_DIR}/quick_benchmark_report_${INSTANCE_TYPE}.html"
echo ""
echo "üåê –û—Ç–∫—Ä–æ–π—Ç–µ HTML –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:"
echo "   file://${RESULTS_DIR}/quick_benchmark_report_${INSTANCE_TYPE}.html"

log_success "–ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
