#!/bin/bash
# MLOps Sentiment Analysis - Benchmarking System Installer
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

log_info "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ MLOps Sentiment Analysis"
log_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_ROOT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
    else
        log_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
        exit 1
    fi
    log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local missing_deps=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if ! command -v pip3 &> /dev/null; then
        missing_deps+=("pip3")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º kubectl (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ! command -v kubectl &> /dev/null; then
        log_warning "kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. Kubernetes —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ! command -v docker &> /dev/null; then
        log_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
    if ! command -v jq &> /dev/null; then
        log_warning "jq –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        if [[ "$OS" == "linux" ]]; then
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞: sudo apt-get install jq"
        elif [[ "$OS" == "macos" ]]; then
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞: brew install jq"
        fi
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    log_success "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python_deps() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    cd "$SCRIPT_DIR/.."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    log_info "–í–µ—Ä—Å–∏—è Python: $python_version"
    
    if [[ $(echo "$python_version >= 3.8" | bc -l) -eq 0 ]]; then
        log_error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $python_version"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if [[ "$1" == "--venv" ]]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -m venv venv
        source venv/bin/activate
        log_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    pip3 install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "requirements.txt" ]; then
        pip3 install -r requirements.txt
        log_success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        log_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
setup_permissions() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º..."
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    chmod +x "$SCRIPT_DIR"/*.sh
    chmod +x "$SCRIPT_DIR/../quick-benchmark.sh"
    
    log_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    local dirs=(
        "$SCRIPT_DIR/../results"
        "$SCRIPT_DIR/../results/reports"
        "$SCRIPT_DIR/../results/cost_reports"
        "$SCRIPT_DIR/../results/archive"
    )
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
        log_info "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
    done
    
    log_success "–†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
validate_config() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    local config_file="$SCRIPT_DIR/../configs/benchmark-config.yaml"
    
    if [ ! -f "$config_file" ]; then
        log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $config_file"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å YAML (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω yq)
    if command -v yq &> /dev/null; then
        if yq eval '.' "$config_file" > /dev/null 2>&1; then
            log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
        else
            log_error "–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $config_file"
            exit 1
        fi
    else
        log_warning "yq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é YAML"
    fi
}

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
test_installation() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    cd "$SCRIPT_DIR/.."
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Python –º–æ–¥—É–ª–µ–π
    python3 -c "
import asyncio
import aiohttp
import yaml
import pandas as pd
import matplotlib.pyplot as plt
print('‚úÖ –í—Å–µ Python –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')
" || {
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Python –º–æ–¥—É–ª–µ–π"
        exit 1
    }
    
    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
    if python3 scripts/load-test.py --help > /dev/null 2>&1; then
        log_success "–°–∫—Ä–∏–ø—Ç load-test.py —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ load-test.py"
        exit 1
    fi
    
    if python3 scripts/cost-calculator.py --help > /dev/null 2>&1; then
        log_success "–°–∫—Ä–∏–ø—Ç cost-calculator.py —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ cost-calculator.py"
        exit 1
    fi
    
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_example_config() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    local example_file="$SCRIPT_DIR/../configs/benchmark-config.example.yaml"
    
    cp "$SCRIPT_DIR/../configs/benchmark-config.yaml" "$example_file"
    
    log_success "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: $example_file"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
show_next_steps() {
    echo ""
    log_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
    echo "=================="
    echo ""
    echo "1. üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç:"
    echo "   cd $(basename "$SCRIPT_DIR/..")"
    echo "   ./quick-benchmark.sh"
    echo ""
    echo "2. üéØ –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞:"
    echo "   ./quick-benchmark.sh -t cpu-medium -u 20 -d 120"
    echo ""
    echo "3. üìä –ü–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫:"
    echo "   ./scripts/deploy-benchmark.sh"
    echo ""
    echo "4. üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   - –û—Å–Ω–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: BENCHMARKING.md"
    echo "   - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: examples/example-usage.md"
    echo "   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: configs/benchmark-config.yaml"
    echo ""
    echo "5. üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:"
    echo "   - results/ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    echo "   - results/reports/ - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã"
    echo "   - results/cost_reports/ - –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
    echo ""
    echo "üîß –ù–ê–°–¢–†–û–ô–ö–ê:"
    echo "============="
    echo "- –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ configs/benchmark-config.yaml –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥"
    echo "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    echo ""
    echo "‚ùì –ü–û–ú–û–©–¨:"
    echo "=========="
    echo "- ./quick-benchmark.sh --help"
    echo "- ./scripts/deploy-benchmark.sh --help"
    echo "- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: BENCHMARKING.md"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local use_venv=false
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            --venv)
                use_venv=true
                shift
                ;;
            --help)
                echo "–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ MLOps Sentiment Analysis"
                echo ""
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
                echo ""
                echo "–û–ø—Ü–∏–∏:"
                echo "  --venv    –°–æ–∑–¥–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python"
                echo "  --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo ""
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    detect_os
    check_dependencies
    create_directories
    setup_permissions
    
    if [ "$use_venv" = true ]; then
        install_python_deps --venv
    else
        install_python_deps
    fi
    
    validate_config
    create_example_config
    test_installation
    show_next_steps
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap 'log_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
