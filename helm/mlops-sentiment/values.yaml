# Default values for mlops-sentiment
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Namespace settings
namespace:
  create: true
  name: "mlops"
  annotations: {}

# Application settings
app:
  name: mlops-sentiment
  version: "1.0.0"

# HashiCorp Vault integration
vault:
  enabled: false
  address: "http://vault.vault-system:8200"
  role: "mlops-sentiment"
  namespace: "mlops"
  secretsPath: "mlops-sentiment"
  auth:
    method: kubernetes
    path: "kubernetes"
  serviceAccount:
    create: true
    annotations: {}
  agent:
    enabled: true
    image: "hashicorp/vault:1.15.0"
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
  # Secret rotation settings
  rotation:
    enabled: true
    schedule: "0 0 * * 0"  # Weekly on Sunday at midnight
    warningThresholdDays: 7  # Warn when secrets expire within 7 days
    autoRotate: false  # Set to true for automatic rotation

  # Enhanced secret management
  secrets:
    # KV v2 secrets engine paths
    kv:
      apiKey: "mlops-sentiment/api_key"
      apiKeys: "mlops-sentiment/api-keys"
      database: "mlops-sentiment/database"
      mlflow: "mlops-sentiment/mlflow"
      monitoring: "mlops-sentiment/monitoring"
      cloud: "mlops-sentiment/cloud"

    # Dynamic secrets engines
    dynamic:
      database:
        enabled: false
        mountPath: "database"
        role: "readonly"
      aws:
        enabled: false
        mountPath: "aws"
        role: "readonly"
      azure:
        enabled: false
        mountPath: "azure"
        role: "readonly"
      gcp:
        enabled: false
        mountPath: "gcp"
        role: "readonly"

image:
  registry: ghcr.io
  repository: arec1b0/mlops-sentiment
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Model Persistence Configuration (160x cold-start improvement: 8s â†’ 50ms)
modelPersistence:
  # Enable model persistence for fast loading
  enabled: true

  # PersistentVolume configuration
  size: 5Gi
  storageClassName: ""  # Use default storage class or specify (e.g., "fast-ssd")
  volumeName: ""  # Optional: specify pre-created PV name

  # Create PersistentVolume (for manual provisioning)
  createPV: false

  # Storage backend options (choose one)
  # NFS storage
  nfs:
    server: ""
    path: "/models"

  # HostPath (for single-node testing only)
  hostPath: ""

  # CSI driver (for cloud providers)
  csi:
    driver: ""  # e.g., "efs.csi.aws.com", "file.csi.azure.com"
    volumeHandle: ""
    volumeAttributes: {}

  # Init Container for model pre-loading
  initContainer:
    enabled: true
    image: python:3.11-slim
    pullPolicy: IfNotPresent
    modelName: "distilbert-base-uncased-finetuned-sst-2-english"
    enableOnnx: "true"

    # Resource limits for init container
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Environment variables
  env:
    MLOPS_DEBUG: "false"
    MLOPS_LOG_LEVEL: "INFO"
    MLOPS_ENABLE_METRICS: "true"
    MLOPS_PORT: "8000"

  # Secrets (will be created from values)
  secrets:
    MLOPS_API_KEY: ""  # Set this in production

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: mlops-sentiment.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mlops-sentiment-tls
      hosts:
        - mlops-sentiment.local

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security Context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Node selection
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - mlops-sentiment
        topologyKey: kubernetes.io/hostname

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8000
  egress:
    # Allow DNS
    - to: []
      ports:
      - protocol: UDP
        port: 53
    # Allow HTTPS for model downloads
    - to: []
      ports:
      - protocol: TCP
        port: 443
    # Allow communication with monitoring
    - to:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 9090  # Prometheus
      - protocol: TCP
        port: 3000  # Grafana

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    labels:
      app: mlops-sentiment

# Prometheus configuration
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 10Gi
    retention: "15d"
  alertmanager:
    enabled: true
    persistentVolume:
      enabled: true
      size: 2Gi
  nodeExporter:
    enabled: true
  kubeStateMetrics:
    enabled: true

# Grafana configuration
grafana:
  enabled: true
  adminPassword: "admin123"  # Change in production!
  persistence:
    enabled: true
    size: 5Gi
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server:80
        access: proxy
        isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      mlops-sentiment:
        gnetId: 0
        datasource: Prometheus
        json: |
          {
            "dashboard": {
              "id": null,
              "title": "MLOps Sentiment Analysis",
              "tags": ["mlops", "sentiment"],
              "timezone": "browser",
              "panels": [],
              "time": {
                "from": "now-1h",
                "to": "now"
              },
              "timepicker": {},
              "templating": {
                "list": []
              },
              "annotations": {
                "list": []
              },
              "refresh": "30s",
              "schemaVersion": 30,
              "version": 1
            }
          }

# Alertmanager configuration
alertmanager:
  enabled: true
  config:
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alerts@mlops-sentiment.local'
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
    receivers:
    - name: 'web.hook'
      slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'
        channel: '#alerts'
        title: 'MLOps Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
