# Production environment values
# Overrides for production environment

# Application settings
deployment:
  replicaCount: 5

  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi

  env:
    MLOPS_DEBUG: "false"
    MLOPS_LOG_LEVEL: "INFO"
    MLOPS_ENABLE_METRICS: "true"

  # Production secrets (should be set via CI/CD)
  secrets:
    MLOPS_API_KEY: "" # Set this in CI/CD pipeline

# Service configuration
service:
  type: ClusterIP

# Ingress with production domain
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.mlops-sentiment.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mlops-sentiment-prod-tls
      hosts:
        - api.mlops-sentiment.com

# HPA for production scaling
hpa:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70

# PDB for high availability
pdb:
  enabled: true
  minAvailable: 2

# Production monitoring with longer retention
prometheus:
  enabled: true
  server:
    retention: "30d"
    persistentVolume:
      size: 50Gi
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi

grafana:
  enabled: true
  adminPassword: "CHANGE_ME_IN_PRODUCTION" # Should be set via secret
  persistence:
    size: 20Gi
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

alertmanager:
  enabled: true
  config:
    global:
      smtp_smarthost: "smtp.company.com:587"
      smtp_from: "alerts@company.com"
      smtp_auth_username: "alerts@company.com"
      smtp_auth_password: "SMTP_PASSWORD" # Should be set via secret
    route:
      group_by: ["alertname", "severity"]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: "default"
      routes:
        - match:
            severity: critical
          receiver: "critical-alerts"
          group_wait: 10s
          repeat_interval: 1h
        - match:
            severity: warning
          receiver: "warning-alerts"
          repeat_interval: 24h
    receivers:
      - name: "default"
        slack_configs:
          - api_url: "SLACK_WEBHOOK_URL" # Should be set via secret
            channel: "#alerts"
            title: "MLOps Alert - {{ .GroupLabels.alertname }}"
            text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"
      - name: "critical-alerts"
        slack_configs:
          - api_url: "SLACK_WEBHOOK_URL"
            channel: "#critical-alerts"
            title: "üö® CRITICAL: {{ .GroupLabels.alertname }}"
            text: '{{ range .Alerts }}{{ .Annotations.summary }}\nDescription: {{ .Annotations.description }}{{ end }}'
        email_configs:
          - to: "oncall@company.com"
            subject: "CRITICAL Alert: {{ .GroupLabels.alertname }}"
            body: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}{{ end }}'
      - name: "warning-alerts"
        slack_configs:
          - api_url: "SLACK_WEBHOOK_URL"
            channel: "#alerts"
            title: "‚ö†Ô∏è Warning: {{ .GroupLabels.alertname }}"
            text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"

# Strict network policy for production
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Only allow traffic from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000
    # Allow monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8000
  egress:
    # DNS only
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # HTTPS for model downloads (specific to Hugging Face)
    - to:
        - namespaceSelector: {}
          podSelector: {}
      ports:
        - protocol: TCP
          port: 443
    # Monitoring communication
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 9093

# Security context for production
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

# Node affinity for production workloads
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: node-role.kubernetes.io/worker
              operator: Exists
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - mlops-sentiment
        topologyKey: kubernetes.io/hostname
